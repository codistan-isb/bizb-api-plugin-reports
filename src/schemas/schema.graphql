extend type Account {
  soldProduct: soldProduct
  uploadedProduct: uploadedProduct
}
type soldProduct {
  totalSoldProductCount: Int
}
type uploadedProduct {
  totalUploadedProductCount: Int
}

type sellerOrderCountReturn {
  subOrderID: ID
  sellerId: String
  storeName: String
  sellerLogo: String
  sellerEmail: String
  orderCount: Float
  sellerPhone: String
  price: Int
  title: String
  status: String
  orderDate: Date
}

type returnSellerTokenPayload {
  accessToken: String
  refreshToken: String
}

type SoldProductsPayload {
  totalcount: Int
  soldProducts: [SoldProduct]
}

type SoldProduct {
  _id: ID!
  product: Product
  sellerInfo: Account
  createdAt: DateTime
  updatedAt: DateTime
  size: String
  shopId: ID
  issoldoutProduct: Int
  inStock: Int
}

type returnToSellerProductsReturn {
  sellerId: String
  updatedAt: DateTime
  productId: String
  product: Product
  sellerInfo: Account
  productInfo: ProductInfo
}

type SimpleInventoryInfo {
  productInfo: [ProductInfo]
  sellerInfo: [Account]
}

type ProductInfo {
  title: String
  sellerId: String
  media: [ImageInfo]
  referenceId: String
  price: ProductPriceRange
}

type returnToSellerProductsPayload {
  totalcount: Int
  returnToSellerProductsReturn: [returnToSellerProductsReturn]
}

type sellerOrderCountPayload {
  totalcount: Int
  sellerOrderCount: [sellerOrderCountReturn]
}

type uploadedProductsMonthlyPayload {
  totalcount: Int
  product: [Product]
}
type sellerRegistraionMonthlyPayload {
  totalcount: Int
  seller: [Account]
}
type soldProductsMonthlyPayload {
  totalcount: Int
  soldProducts: [SimpleInventoryInfo]
}

type sellerOrderCountPayload {
  sellerId: String
  storeName: String
  orderCount: Float
}

type Hashtag {
  id: ID # The unique identifier for the tag
  slug: String # The slug/name for the tag
}

type sellerUploadReturnCount {
  _id: String
  sellerLogo: String
  sellerName: String
  sellerEmail: String
  productCount: Float
  sellerPhone: String
  productTitles: [String] # New field to include product titles
  hashtags: [Hashtag]
}

type sellerUploadCountPayload {
  totalcount: Int
  sellerUploadProducts: [sellerUploadReturnCount]
}

type ordersStatusReportResp {
  subOrderId: String
  sellerId: String
  sellerLogo: String
  sellerEmail: String
  storeName: String
  productCount: Float
  sellerPhone: String
  createdAt: Date
  status: String
  price: Int
}

type ordersStatusReportPayload {
  totalcount: Int
  ordersStatusReport: [ordersStatusReportResp]
}
type sellerPaymentsReportPayload {
  totalcount: Int
  PaymentRecord: [sellerPaymentPayload]
}
type sellerPaymentPayload {
  _id: String
  orderId: String
  productId: String
  # paymentCreatedDate: DateTime
  # paymentReleasedDate: DateTime
  createdAt: String
  updatedAt: String
  totalPrice: Float
  fee: Float
  amount: Float
  subOrderId: String
  internalOrderId: String
  status: String
  itemId: String
  sellerInfo: Account
  productName: String
  productReferenceId: String
}

type sellerSoldProductsPayload {
  totalSoldProductCount: Int
}

type sellerInfoPayload {
  sellerId: String
  sellerEmail: String
  storeName: String
  sellerPhone: String
}
type sellerListingPayload {
  soldProduct: Int
  publishedProducts: Int
  unPublishedProducts: Int
  ListedProduct: Int
}

type currentSellerSoldProductsCount {
  totalSoldItems: Int
}
type currentSellerUploadedProductMonthly {
  totalUploadedItems: Int
}

type WeekData {
  name: String
  uv: Float
  pv: Float
  amt: Float
}

type currentSellerEarningsPayload {
  weekData: [WeekData]
}
type earningsBreakDownPayload {
  totalRevenue: Float
  totalCommission: Float
  netProfit: Float
}
extend type SimpleInventoryInfo {
  updatedAt: DateTime
}

type commissionDetailsPayload {
  orderId: String
  commissionFee: Float
  netProfit: Float
}
type CommissionDetailsResponse {
  totalCount: Int
  commissionDetails: [commissionDetailsPayload]
}
type ProductInsightsResponse {
  productId: ID
  viewCount: Int
}

type buyerReferalUsage {
  discountCode: String
  Account: Account
}

type SetPasswordResponse {
  message: String
}

type Query {
  sellerOrderCount(
    skip: Int = 0
    limit: Int = 20
    startDate: DateTime
    endDate: DateTime
    childOrderId: ID
    storeName: ID
    productId: String
    productName: String
    orderStatus: String
  ): sellerOrderCountPayload

  returnToSellerProducts(
    skip: Int = 0
    limit: Int = 20
    startDate: DateTime
    endDate: DateTime
    storeName: String
    productName: String
    productID: ID
  ): returnToSellerProductsPayload

  # sellerUploadCount(
  #   skip: Int = 0
  #   limit: Int = 20
  #   startDate: DateTime
  #   endDate: DateTime
  # ): [sellerUploadCountPayload]

  ordersStatusReport(
    skip: Int = 0
    limit: Int = 20
    startDate: DateTime
    endDate: DateTime
    orderStatus: subOrderStatus
    byStores: String
    byProduct: String
    byStoreName: String
  ): ordersStatusReportPayload

  sellerUploadCount(
    skip: Int = 0
    limit: Int = 20
    startDate: DateTime
    endDate: DateTime
    storeName: String
    hashtagIds: [ID]
  ): sellerUploadCountPayload

  uploadedProductsMonthly(
    skip: Int = 0
    limit: Int = 20
    startDate: DateTime
    endDate: DateTime
  ): uploadedProductsMonthlyPayload

  sellerRegistraionMonthly(
    skip: Int = 0
    limit: Int = 20
    startDate: DateTime
    endDate: DateTime
    storeName: String
    email: String
    contact: String
    promoCode: String
  ): sellerRegistraionMonthlyPayload

  soldProductsMonthly(
    skip: Int = 0
    limit: Int = 20
    startDate: DateTime
    endDate: DateTime
    storeName: String
    category: String
  ): soldProductsMonthlyPayload

  # soldProducts(
  #   skip: Int = 0
  #   limit: Int = 20
  #   startDate: DateTime
  #   endDate: DateTime
  #   storeName: String
  #   category: String
  # ): soldProductsMonthlyPayload

  soldProducts(
    skip: Int = 0
    limit: Int = 20
    startDate: DateTime
    endDate: DateTime
    storeName: String
    category: String
    tagIds: [ID]
  ): SoldProductsPayload

  sellerPaymentsReport(
    paymentStatus: PaymentStatus
    skip: Int = 0
    limit: Int = 20
    startDate: DateTime
    endDate: DateTime
    productId: String
    storeName: String
    productName: String
    subOrderID: String
    paymentID: String
  ): sellerPaymentsReportPayload

  # seller dashboard apis
  currentSellerSoldProducts: Int
  currentSellerActiveProducts: Int

  currentSellerUploadedProductMonthly(
    startDate: DateTime
    endDate: DateTime
  ): currentSellerUploadedProductMonthly

  currentSellerEarnings(
    startDate: DateTime
    endDate: DateTime
  ): currentSellerEarningsPayload
  currentSellerSales: Float

  #buyer side api
  sellerSoldProducts(userId: String): sellerSoldProductsPayload
  sellerListedProduct: sellerListingPayload
  sellerEarningBreakDown: earningsBreakDownPayload
  commissionDetails: CommissionDetailsResponse
  productInsights: [ProductInsightsResponse]
  buyerReferalCode: [buyerReferalUsage]
}

extend type Mutation {
  getSellerToken(userId: String): returnSellerTokenPayload

  setPassword(userId: ID!, newPassword: String!): SetPasswordResponse
}
